[tool.poetry]
name = "{{ cookiecutter.package_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.short_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
# Use identifier from https://spdx.org/licenses/
license = "{{ cookiecutter.license }}"
readme = "README.md"

packages = [{ include = "{{cookiecutter.module_name}}", from = "src" }]

[tool.poetry.dependencies]
python = "{{cookiecutter.compatible_python_versions}}"


[tool.poetry.group.dev.dependencies]
black = "*"
pre-commit = "*"
ruff = "*"
pydocstyle = "*"
interrogate = "*"


[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-gen-files = "*"
mkdocs-literate-nav = "*"
mkdocs-autorefs = "*"
mkdocs-material = "*"
mkdocstrings = { extras = ["python"], version = "*" }
mkdocs-macros-plugin = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py311']
line-length = 79

[tool.ruff]
line-length = 79
target-version = "py311"
select = ["ALL"]
ignore = [
    # flake8-boolean-trap
    "FBT",
    # bandit
    "S",
    # flake8-logging
    "G",
    # flake8-print
    "T",
    # McCabe complexity
    "C901",
    # do not assign a lambda expression, use a def
    "E731",
    # Too many arguments to function call
    "PLR0913",
    # Missing type annotation for `self` in method
    "ANN101",
    # suppressible-exception
    "SIM105",
    "INP001",
]
unfixable = [
    # Remove unused-imports
    "F401",
    # Variable assigned but never used
    "F841",
    # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM118",
    # move to type-checking block
    "TCH003",
    # found comented-out code
    "ERA001",
]

[tool.ruff.pydocstyle]
convention = 'numpy'

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 100
exclude = ["setup.py", "docs", "build"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--cov"]
testpaths = ["tests"]

[tool.coverage.paths]
source = ["{{cookiecutter.module_name}}", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.module_name}}"]

[tool.coverage.report]
show_missing = true
