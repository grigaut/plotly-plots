[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = ""
authors = ["{{cookiecutter.author}}"]
readme = "README.md"

packages = [
    { include = "{{cookiecutter.project_name|lower|replace('-', '_')}}", from = "src" },
]

[tool.poetry.dependencies]
python = "{{cookiecutter.compatible_python_versions}}"


[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
pre-commit = "^3.2.2"
ruff = "^0.0.263"
pydocstyle = "^6.3.0"
interrogate = "^1.5.0"


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-autorefs = "^0.4.1"
mkdocs-material = "^9.1.8"
mkdocstrings = { extras = ["python"], version = "^0.21.2" }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79

[tool.ruff]
line-length = 79
target-version = "py311"
select = ["ALL"]
ignore = [
    # flake8-boolean-trap
    "FBT",
    # bandit
    "S",
    # flake8-logging
    "G",
    # flake8-print
    "T",
    # McCabe complexity
    "C901",
    # do not assign a lambda expression, use a def
    "E731",
    # Too many arguments to function call
    "PLR0913",
    # Missing type annotation for `self` in method
    "ANN101",
    # suppressible-exception
    "SIM105",
    "INP001",
]
unfixable = [
    # Remove unused-imports
    "F401",
    # Variable assigned but never used
    "F841",
    # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM118",
    # move to type-checking block
    "TCH003",
    # found comented-out code
    "ERA001",
]

[tool.ruff.pydocstyle]
convention = 'numpy'

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 100
exclude = ["setup.py", "docs", "build"]
verbose = 1
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--cov"]
testpaths = ["tests"]

[tool.coverage.paths]
source = [
    "{{cookiecutter.project_name|lower|replace('-', '_')}}",
    "*/site-packages",
]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.project_name|lower|replace('-', '_')}}"]

[tool.coverage.report]
show_missing = true
